package final1;public class UndirectedGraph<T> implements GraphInterface<T> {	private HashMap<T, CustomHashSet<T>> friendsMap;	int edgeCount = 0;	public UndirectedGraph() {		friendsMap = new HashMap<>();	}	@Override	public boolean addVertex(T vertexLabel) {		if (friendsMap.containsKey(vertexLabel)) {			System.out.println("The given profile is already added in the Graph.");			return false;		} else {			friendsMap.put(vertexLabel, new CustomHashSet<>());			System.out.println("Profile added successfully to the Graph.");			return true;		}	}	@Override	@Deprecated	public boolean addEdge(T begin, T end, double edgeWeight) {		return addEdge(begin, end);	}	@Override	public boolean addEdge(T begin, T end) {		if (friendsMap.containsKey(begin) && friendsMap.containsKey(end) && !begin.equals(end)) {			friendsMap.get(begin).add(end);			friendsMap.get(end).add(begin);			System.out.println("Two profiles became friend successfully!");			edgeCount++;			return true;		} else {			System.out.println("The given value is not initialized/added into the graph."					+ "\nPlease use addVertex(T vertexLabel) to add the Profile first.");			return false;		}	}	@Override	public boolean hasEdge(T begin, T end) {		if (friendsMap.containsKey(begin) && friendsMap.containsKey(end)) {			if (friendsMap.get(begin).contains(end) && friendsMap.get(end).contains(begin)) {				System.out.println("Two profiles are friends!");				return true;			} else {				System.out.println("Two profiles are NOT friends!");				return false;			}		} else {			System.out.println("The given value is not initialized/added into the graph."					+ "\nPlease use addVertex(T vertexLabel) to add the Profile first.");			return false;		}	}	@Override	public boolean isEmpty() {		return friendsMap.size() == 0;	}	@Override	public int getNumberOfVertices() {		return friendsMap.size();	}	@Override	public int getNumberOfEdges() {		return edgeCount;	}	@Override	public void clear() {		friendsMap.clear();	}		@Override	public boolean removeEdge(T begin, T end) {		if (friendsMap.containsKey(begin) && friendsMap.containsKey(end)) {			if (friendsMap.get(begin).remove(end) && friendsMap.get(end).remove(begin)) {				System.out.println("Two profiles disconnected successfully");				return true;			} else {				System.out.println("Two profiles are NOT friends!");				return false;			}		} else {			System.out.println("The given value is not initialized/added into the graph."					+ "\nPlease use addVertex(T vertexLabel) to add the Profile first.");			return false;		}	}		public CustomHashSet<T> retainAll() {		return friendsMap.keySet();	}		public HashMap<T, CustomHashSet<T>> getFriendsMap() {		return friendsMap;	}}